TAKEAWAY:
JSON data is a fucking object. You could just GET the string, parse it, loop through the lists.tasks, modify it, THEN stringify and send ti over. It's simple as that.

JSON formating of data is the universal format for transmitting data on the web
often encountered when working with external servers or APIs
format very much resembles JavaScript object literal format
This allows you to construct a data hierarchy:

 {
  "squadName": "Super hero squad",
  "homeTown": "Metro City",
  "formed": 2016,
  "secretBase": "Super tower",
  "active": true,
  "members": [
    {
      "name": "Molecule Man",
      "age": 29,
      "secretIdentity": "Dan Jukes",
      "powers": [
        "Radiation resistance",
        "Turning tiny",
        "Radiation blast"
      ]
    },

If we loaded this string into a JavaScript program, parsed it into a variable called superHeroes for example, we could then access the data inside it using the same dot/bracket notation we looked at here:

superHeroes.homeTown
superHeroes['active']





Old way to do it, but still worth of knowing:

To obtain the JSON, we use an API called XMLHttpRequest (often called XHR)

let requestURL = 'https://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json';

To create a request, we need to create a new request object instance from the XMLHttpRequest constructor, using the new keyword

let request = new XMLHttpRequest();

request.open('GET', requestURL);
PARAMETERS:
1- The HTTP method to use when making the network request. In this case GET is fine, as we are just retrieving some simple data.
2- The URL to make the request to — this is the URL of the JSON file that we stored earlier.
*****  THERE ARE MORE PARAMETERS, BUT THEY'RE OPTIONAL:
XMLHttpRequest.open(method, url[, async[, user[, password]]])

We are setting the responseType to JSON, so that XHR knows that the server will be returning JSON, and that this should be converted behind the scenes into a JavaScript object
request.send(); //send the GET request
request.responseType = 'json';  //THIS MEANS,,LIKE, NOTHING. SHIT. IT MEANS DO SHIT. FUCK. THIS IS A MORE REALISTIC EXAMPLE:

request.open('GET', requestURL);
request.responseType = 'text'; // now we're getting a string!
request.send();

request.onload = function() {
  const superHeroesText = request.response; // get the string from the response
  const superHeroes = JSON.parse(superHeroesText); // convert it to an object
  populateHeader(superHeroes);
  showHeroes(superHeroes);
}


Here we are storing the response to our request (available in the response property) in a variable called superHeroes; this variable now contains the JavaScript object based on the JSON! We are then passing that object to two function calls — the first one fills the <header> with the correct data, while the second one creates an information card for each hero on the team, and inserts it into the <section>. //SO, BASSICALLY PRETTY CONTINGENT STUFF //

We have wrapped the code in an event handler that runs when the load event fires on the request object (see onload) — this is because the load event fires when the response has successfully returned; doing it this way guarantees that request.response will definitely be available when we come to try to do something with it.


function populateHeader(obj) {
  const myH1 = document.createElement('h1');
  myH1.textContent = obj['squadName'];
  header.appendChild(myH1);

  const myPara = document.createElement('p');
  myPara.textContent = 'Hometown: ' + obj['homeTown'] + ' // Formed: ' + obj['formed'];
  header.appendChild(myPara);
}